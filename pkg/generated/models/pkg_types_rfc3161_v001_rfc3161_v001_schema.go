// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PkgTypesRfc3161V001Rfc3161V001Schema Timestamp v0.0.1 Schema
//
// # Schema for RFC3161 entries
//
// swagger:model pkgTypesRfc3161V001Rfc3161V001Schema
type PkgTypesRfc3161V001Rfc3161V001Schema struct {

	// tsr
	// Required: true
	Tsr *PkgTypesRfc3161V001Rfc3161V001SchemaTsr `json:"tsr"`
}

// Validate validates this pkg types rfc3161 v001 rfc3161 v001 schema
func (m *PkgTypesRfc3161V001Rfc3161V001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTsr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRfc3161V001Rfc3161V001Schema) validateTsr(formats strfmt.Registry) error {

	if err := validate.Required("tsr", "body", m.Tsr); err != nil {
		return err
	}

	if m.Tsr != nil {
		if err := m.Tsr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tsr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tsr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pkg types rfc3161 v001 rfc3161 v001 schema based on the context it is used
func (m *PkgTypesRfc3161V001Rfc3161V001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTsr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRfc3161V001Rfc3161V001Schema) contextValidateTsr(ctx context.Context, formats strfmt.Registry) error {

	if m.Tsr != nil {

		if err := m.Tsr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tsr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tsr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRfc3161V001Rfc3161V001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRfc3161V001Rfc3161V001Schema) UnmarshalBinary(b []byte) error {
	var res PkgTypesRfc3161V001Rfc3161V001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PkgTypesRfc3161V001Rfc3161V001SchemaTsr Information about the tsr file associated with the entry
//
// swagger:model PkgTypesRfc3161V001Rfc3161V001SchemaTsr
type PkgTypesRfc3161V001Rfc3161V001SchemaTsr struct {

	// Specifies the tsr file content inline within the document
	// Required: true
	// Format: byte
	Content *strfmt.Base64 `json:"content"`
}

// Validate validates this pkg types rfc3161 v001 rfc3161 v001 schema tsr
func (m *PkgTypesRfc3161V001Rfc3161V001SchemaTsr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRfc3161V001Rfc3161V001SchemaTsr) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("tsr"+"."+"content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pkg types rfc3161 v001 rfc3161 v001 schema tsr based on context it is used
func (m *PkgTypesRfc3161V001Rfc3161V001SchemaTsr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRfc3161V001Rfc3161V001SchemaTsr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRfc3161V001Rfc3161V001SchemaTsr) UnmarshalBinary(b []byte) error {
	var res PkgTypesRfc3161V001Rfc3161V001SchemaTsr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
