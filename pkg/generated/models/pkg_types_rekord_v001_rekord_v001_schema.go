// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PkgTypesRekordV001RekordV001Schema Rekor v0.0.1 Schema
//
// # Schema for Rekord object
//
// swagger:model pkgTypesRekordV001RekordV001Schema
type PkgTypesRekordV001RekordV001Schema struct {

	// data
	// Required: true
	Data *PkgTypesRekordV001RekordV001SchemaData `json:"data"`

	// signature
	// Required: true
	Signature *PkgTypesRekordV001RekordV001SchemaSignature `json:"signature"`
}

// Validate validates this pkg types rekord v001 rekord v001 schema
func (m *PkgTypesRekordV001RekordV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001Schema) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *PkgTypesRekordV001RekordV001Schema) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	if m.Signature != nil {
		if err := m.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pkg types rekord v001 rekord v001 schema based on the context it is used
func (m *PkgTypesRekordV001RekordV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001Schema) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *PkgTypesRekordV001RekordV001Schema) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.Signature != nil {

		if err := m.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001Schema) UnmarshalBinary(b []byte) error {
	var res PkgTypesRekordV001RekordV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PkgTypesRekordV001RekordV001SchemaData Information about the content associated with the entry
//
// swagger:model PkgTypesRekordV001RekordV001SchemaData
type PkgTypesRekordV001RekordV001SchemaData struct {

	// Specifies the content inline within the document
	// Format: byte
	Content strfmt.Base64 `json:"content,omitempty"`

	// hash
	Hash *PkgTypesRekordV001RekordV001SchemaDataHash `json:"hash,omitempty"`
}

// Validate validates this pkg types rekord v001 rekord v001 schema data
func (m *PkgTypesRekordV001RekordV001SchemaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaData) validateHash(formats strfmt.Registry) error {
	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if m.Hash != nil {
		if err := m.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pkg types rekord v001 rekord v001 schema data based on the context it is used
func (m *PkgTypesRekordV001RekordV001SchemaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaData) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if m.Hash != nil {

		if swag.IsZero(m.Hash) { // not required
			return nil
		}

		if err := m.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaData) UnmarshalBinary(b []byte) error {
	var res PkgTypesRekordV001RekordV001SchemaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PkgTypesRekordV001RekordV001SchemaDataHash Specifies the hash algorithm and value for the content
//
// swagger:model PkgTypesRekordV001RekordV001SchemaDataHash
type PkgTypesRekordV001RekordV001SchemaDataHash struct {

	// The hashing function used to compute the hash value
	// Required: true
	// Enum: ["sha256"]
	Algorithm *string `json:"algorithm"`

	// The hash value for the content
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this pkg types rekord v001 rekord v001 schema data hash
func (m *PkgTypesRekordV001RekordV001SchemaDataHash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pkgTypesRekordV001RekordV001SchemaDataHashTypeAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pkgTypesRekordV001RekordV001SchemaDataHashTypeAlgorithmPropEnum = append(pkgTypesRekordV001RekordV001SchemaDataHashTypeAlgorithmPropEnum, v)
	}
}

const (

	// PkgTypesRekordV001RekordV001SchemaDataHashAlgorithmSha256 captures enum value "sha256"
	PkgTypesRekordV001RekordV001SchemaDataHashAlgorithmSha256 string = "sha256"
)

// prop value enum
func (m *PkgTypesRekordV001RekordV001SchemaDataHash) validateAlgorithmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pkgTypesRekordV001RekordV001SchemaDataHashTypeAlgorithmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaDataHash) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"hash"+"."+"algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgorithmEnum("data"+"."+"hash"+"."+"algorithm", "body", *m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaDataHash) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"hash"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pkg types rekord v001 rekord v001 schema data hash based on the context it is used
func (m *PkgTypesRekordV001RekordV001SchemaDataHash) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaDataHash) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaDataHash) UnmarshalBinary(b []byte) error {
	var res PkgTypesRekordV001RekordV001SchemaDataHash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PkgTypesRekordV001RekordV001SchemaSignature Information about the detached signature associated with the entry
//
// swagger:model PkgTypesRekordV001RekordV001SchemaSignature
type PkgTypesRekordV001RekordV001SchemaSignature struct {

	// Specifies the content of the signature inline within the document
	// Required: true
	// Format: byte
	Content *strfmt.Base64 `json:"content"`

	// Specifies the format of the signature
	// Required: true
	// Enum: ["pgp","minisign","x509","ssh"]
	Format *string `json:"format"`

	// public key
	// Required: true
	PublicKey *PkgTypesRekordV001RekordV001SchemaSignaturePublicKey `json:"publicKey"`
}

// Validate validates this pkg types rekord v001 rekord v001 schema signature
func (m *PkgTypesRekordV001RekordV001SchemaSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaSignature) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("signature"+"."+"content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

var pkgTypesRekordV001RekordV001SchemaSignatureTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pgp","minisign","x509","ssh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pkgTypesRekordV001RekordV001SchemaSignatureTypeFormatPropEnum = append(pkgTypesRekordV001RekordV001SchemaSignatureTypeFormatPropEnum, v)
	}
}

const (

	// PkgTypesRekordV001RekordV001SchemaSignatureFormatPgp captures enum value "pgp"
	PkgTypesRekordV001RekordV001SchemaSignatureFormatPgp string = "pgp"

	// PkgTypesRekordV001RekordV001SchemaSignatureFormatMinisign captures enum value "minisign"
	PkgTypesRekordV001RekordV001SchemaSignatureFormatMinisign string = "minisign"

	// PkgTypesRekordV001RekordV001SchemaSignatureFormatX509 captures enum value "x509"
	PkgTypesRekordV001RekordV001SchemaSignatureFormatX509 string = "x509"

	// PkgTypesRekordV001RekordV001SchemaSignatureFormatSSH captures enum value "ssh"
	PkgTypesRekordV001RekordV001SchemaSignatureFormatSSH string = "ssh"
)

// prop value enum
func (m *PkgTypesRekordV001RekordV001SchemaSignature) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pkgTypesRekordV001RekordV001SchemaSignatureTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaSignature) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("signature"+"."+"format", "body", m.Format); err != nil {
		return err
	}

	// value enum
	if err := m.validateFormatEnum("signature"+"."+"format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaSignature) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("signature"+"."+"publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature" + "." + "publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signature" + "." + "publicKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pkg types rekord v001 rekord v001 schema signature based on the context it is used
func (m *PkgTypesRekordV001RekordV001SchemaSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaSignature) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey != nil {

		if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature" + "." + "publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signature" + "." + "publicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaSignature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaSignature) UnmarshalBinary(b []byte) error {
	var res PkgTypesRekordV001RekordV001SchemaSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PkgTypesRekordV001RekordV001SchemaSignaturePublicKey The public key that can verify the signature
//
// swagger:model PkgTypesRekordV001RekordV001SchemaSignaturePublicKey
type PkgTypesRekordV001RekordV001SchemaSignaturePublicKey struct {

	// Specifies the content of the public key inline within the document
	// Required: true
	// Format: byte
	Content *strfmt.Base64 `json:"content"`
}

// Validate validates this pkg types rekord v001 rekord v001 schema signature public key
func (m *PkgTypesRekordV001RekordV001SchemaSignaturePublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PkgTypesRekordV001RekordV001SchemaSignaturePublicKey) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("signature"+"."+"publicKey"+"."+"content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pkg types rekord v001 rekord v001 schema signature public key based on context it is used
func (m *PkgTypesRekordV001RekordV001SchemaSignaturePublicKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaSignaturePublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkgTypesRekordV001RekordV001SchemaSignaturePublicKey) UnmarshalBinary(b []byte) error {
	var res PkgTypesRekordV001RekordV001SchemaSignaturePublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
